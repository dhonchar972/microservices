version Определяет версию инструмента Docker Compose
service Определяет развертываемую службу. Имя службы превращается в запись в DNS для экземпляра в Docker и упрощает доступ к ней
image Определяет имя образа для запуска контейнера
port Определяет номер порта в контейнере Docker, который будет открыт для внешнего мира. Отображает внутренние порты во внешние
environment Определяет переменные окружения для запускаемого образа Docker
network Определяет сеть. Позволяет создавать сложные топологии. Тип по умолчанию – bridge, поэтому если не указать явно другой тип 
						(host, overlay, macvlan или none), то будет создана сеть типа bridge. Сеть bridge обеспечивает подключение контейнера к сети хоста. 
						Обратите внимание, что сеть типа bridge применяется только к контейнерам, выполняющимся под управлением одного и того же демона Docker
alias Определяет альтернативное имя хоста для службы в сети
docker-compose up -d Создает образы для приложения и запускает определенные вами службы. Эта команда загружает все необходимые образы, затем развертывает их и запускает контейнер. Параметр -d требует запустить Docker в фоновом режиме
docker-compose logs Позволяет просмотреть всю информацию о последнем развертывании
docker-compose logs <service_id> Позволяет просмотреть журналы для конкретной службы. Например, просмотреть историю развертывания службы лицензий можно с помощью команды docker-compose logs licenseService
docker-compose ps Выведет список всех контейнеров, которые вы развернули в своей системе
docker-compose stop Останавливает запущенные вами службы. Также останавливает контейнеры
docker-compose down Останавливает все службы и удаляет все контейнеры



version: <docker-compose-version>
services:
	database:
		image: <database-docker-image-name>
		ports:
			- "<databasePort>:<databasePort>"
		environment:
			POSTGRES_USER: <databaseUser>
			POSTGRES_PASSWORD: <databasePassword>
			POSTGRES_DB:<databaseName>

	<service-name>:
		image: <service-docker-image-name>
		ports:
			- "<applicationPort>:<applicationPort>"
		environment:
			PROFILE: <profile-name>
			DATABASESERVER_PORT: "<databasePort>"
	container_name: <container_name>
		networks:
		backend:
		aliases:
			- "alias"

	networks:
		backend:
	driver: bridge